version: "3.9" 
# docker compose schema version

services: 
    # services are also our containers we want to run as part ot our application
    api:
        build: 
            context: . 
            # use context on current directory
            dockerfile: Dockerfile.dev
        command: python manage.py runserver 0.0.0.0:8000
        # command and port to run our server
        volumes:
            # everything in current directory and map it to /app. volume mounts the code to container and update container when a change 
            # is made in sourcecode. It should only be used during development to avoid rebuilding when change is made to source code
            - .:/app
        ports:
            # map port 8000 in our container to port 8000 in our machine
            - 8000:8000

        env_file: 
            - .env  
        restart: "on-failure"
        depends_on:
            - postgres-db
        networks:
            - hospital-api
        
    postgres-db:
        image: kartoza/postgis:12.0
        ports: 
            - 5432:5432
        volumes: 
            # volumes in db is for where you want to store data  + for persistence : persestence service
            - postgres_data:/var/lib/postgresql
        environment: 
            # database credentials
            - POSTGRES_DBNAME=${POSTGRES_DBNAME}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASS=${POSTGRES_PASS}
        restart: "on-failure"
        networks:
            - hospital-api

networks: 
    hospital-api:
        driver: bridge

volumes:
    postgres_data:


